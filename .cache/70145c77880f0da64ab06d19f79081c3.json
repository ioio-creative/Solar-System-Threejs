{"id":"node_modules/newton-raphson/index.js","dependencies":[{"name":"/Users/16mahs1/Desktop/Work/IOIOCreative/Solar-System-threejs/node_modules/newton-raphson/package.json","includedInParent":true,"mtime":1533022729863},{"name":"/Users/16mahs1/Desktop/Work/IOIOCreative/Solar-System-threejs/package.json","includedInParent":true,"mtime":1533609451524}],"generated":{"js":"var define;\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.newtonRaphson = factory();\n  }\n}(this, function () {\n  return function findRoot(f, fprime, guess, options) {\n    options = options || {};\n    var tolerance = options.tolerance || 0.00000001;\n    var epsilon = options.epsilon || 0.0000000000001;\n    var maxIterations = options.maxIterations || 20;\n    var haveWeFoundSolution = false; \n    var newtonX;\n   \n    for (var i = 0; i < maxIterations; ++i) {\n      var denominator = fprime(guess);\n      if (Math.abs(denominator) < epsilon) {\n        return false\n      }\n   \n      result = guess - (f(guess) / denominator);\n      \n      var resultWithinTolerance = Math.abs(result - guess) < tolerance;\n      if (resultWithinTolerance) { \n        return result\n      }\n\n      guess = result;\n    }\n    \n    return false;\n  }\n}));","map":{"mappings":[{"source":"node_modules/newton-raphson/index.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/newton-raphson/index.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}}],"sources":{"node_modules/newton-raphson/index.js":"(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.newtonRaphson = factory();\n  }\n}(this, function () {\n  return function findRoot(f, fprime, guess, options) {\n    options = options || {};\n    var tolerance = options.tolerance || 0.00000001;\n    var epsilon = options.epsilon || 0.0000000000001;\n    var maxIterations = options.maxIterations || 20;\n    var haveWeFoundSolution = false; \n    var newtonX;\n   \n    for (var i = 0; i < maxIterations; ++i) {\n      var denominator = fprime(guess);\n      if (Math.abs(denominator) < epsilon) {\n        return false\n      }\n   \n      result = guess - (f(guess) / denominator);\n      \n      var resultWithinTolerance = Math.abs(result - guess) < tolerance;\n      if (resultWithinTolerance) { \n        return result\n      }\n\n      guess = result;\n    }\n    \n    return false;\n  }\n}));"},"lineCount":37}},"hash":"6206411e9293d1ac5e2ed5537b345040","cacheData":{"env":{}}}